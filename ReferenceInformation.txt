Embedded file info - Bext Chunk - Description	Embedded file info - Info List - ICMT	Embedded file info - Info List - IARL
Indiana University, Bloomington. William and Gayle Cook Music Library. TP-S .A1828 81-4-17 v. 1. File use: 	Indiana University, Bloomington. William and Gayle Cook Music Library. TP-S .A1828 81-4-17 v. 1. File use: 	Indiana University, Bloomington. William and Gayle Cook Music Library.


Questions for Mike and Susan:

1) do we use the BEXT Description field only with just the text from the spreadsheet
2) do we use the IARL field with just the text from the spreadsheet
3) do we use the ISFT or do we use the xxxx for the ICMT field from the spreadsheet
4) can we count on always having a preservation copy that is whole?  or do we need to program for the case where there is a collection of preservation files and a consolidated production file?
5) on what conditions would there be any auxiliary files, and how would they be named and organized along with the main files



using System;

using System.Configuration;

using System.IO;

using System.Security.Cryptography;

using System.Windows.Forms;

using System.Xml.Linq;





namespace IuMDPIApplication

{

    public partial class Form1 : Form

    {

        // declare our variables that we will load from a config file

        private String workDirectoryName;

        private String iuXmlOutputFileName;

        private String webServiceUrl; // basic auth with valid cert over ssl, big payload





        public Form1()

        {

            InitializeComponent();

            this.workDirectoryName = ConfigurationSettings.AppSettings["workDirectoryName"];

            this.iuXmlOutputFileName = ConfigurationSettings.AppSettings["iuXmlOutputFileName"];

            this.webServiceUrl = ConfigurationSettings.AppSettings["webServiceUrl"];

        }



        private void Form1_Load(object sender, EventArgs e)

        {

            // if we need to handle any events on load, all config should be read in on Construction

        }



        private void button1_Click(object sender, EventArgs e)

        {

            this.openFileDialog1.InitialDirectory = workDirectoryName;

            this.openFileDialog1.ShowDialog();

            this.textBox1.Text = this.openFileDialog1.FileName;



            String hashAsString = "";             

            using (var md5 = MD5.Create())

                {

                    using (var stream = File.OpenRead(this.textBox1.Text))

                    {

                        byte[] hash = md5.ComputeHash(stream);

                        //this.richTextBox1.Text = Convert.ToBase64String(hash);

 

                        foreach (byte b in hash)

                        {

                            hashAsString = hashAsString +  string.Format("{0:x2}", b); 

                                // printf as "%02x";

                            

                        }

                        this.richTextBox1.Text = hashAsString;

                    }

                }

        }



        private String getMd5HashString(String fileName)

        {

            using (var md5 = MD5.Create())

            {

                using (var stream = File.OpenRead(fileName))

                {

                    return System.Text.Encoding.UTF8.GetString(md5.ComputeHash(stream));

                }

            }

        }



        private XDocument generateXmlDocument(String md5, String techMetaData)

        {

            XDocument doc = new XDocument(new XElement("body",

                                           new XElement("level1",

                                               new XElement("level2", "text"),

                                               new XElement("level2", "other text"))));

            return doc;



        }

    }

}

