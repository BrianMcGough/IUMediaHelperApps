Embedded file info - Bext Chunk - Description	Embedded file info - Info List - ICMT	Embedded file info - Info List - IARL
Indiana University, Bloomington. William and Gayle Cook Music Library. TP-S .A1828 81-4-17 v. 1. File use: 	Indiana University, Bloomington. William and Gayle Cook Music Library. TP-S .A1828 81-4-17 v. 1. File use: 	Indiana University, Bloomington. William and Gayle Cook Music Library.


Questions for Mike and Susan:


4) can we count on always having a preservation copy that is whole?
		Answer: NO  ie we need to program for the case where there is a collection of preservation files and a consolidated production file?
5) on what conditions would there be any auxiliary files, and how would they be named and organized along with the main files
7) should xml files have encoding specified. If so, what encoding should we use?
8) will there be more than one project code ("mdpi",etc)
9) what should we do when something goes wrong? Email? Skip and Continue?
10) will sequence numbers always be numeric?
11) is "mezz" file-use only for video and "prod" only for audio?
12) is the "int" part of "pres-int" dynamic? ie. "pres-1, pres-2," etc...?
13) how do you want us to format dates in the xml file? Is format in example xml ("YYYY-MM-DD") ok ?
14) should dates be in UTC or local time? Assuming UTC....
15) what info should be in ingest->created_by? Username, full name, some combination of?
16) is Environment.MachineName (gets name of machine in domain) ok for Ingest->ExtractionWorkstation? This assumes that files are being processed on same machine as utility is being run on.
17) what is the best way to get Player_serial_number, Player_manufacturer, Player_model, AD_serial_number, AD_manufacturer, and AD_model values?

Follow ups for Mike and Jean
- command line arguments for the production and play copies
- follow up on webservice status, and build in a way to save the password safely outside the program


-	DATs will be digitized at original sample rate: either 16/44.1 or 16/48.


Things to do:

1) rename "Batch" to "Object" in logs (don't use 'artifact') (done - 6/3 - bm)
2) audio should produce prod, not mezz (done - 6/3 -bm)
3) should support pres-int (done - 6/3 -bm)
4) should add metadata to pres, pres-int, prod, and mess, but not access (done - 6/3 -bm)
5) should base prod off of pres-int it's present. (done = 6/3 - bm)
6) figure out ffmpeg command-line, etc. to align with Brian's doc. See below.
7) add timezone after date values
8) project code should be upper-case when saved
9) can have up to 4 parts (sides)
10) need to add path to auth file in program settings
11) In metadata need to add file use after description
12) in metadata need to add original file name (without extension) to description
13) need to figure out what extensions to use for audio
14) need to get latest ffmpeg version


A couple of useful command lines :

1°) Find out available and supported decklink devices : ffmpeg -f decklink -list_devices 1 -i dummy

[decklink @ 00000000002F3B80] Blackmagic DeckLink devices:
[decklink @ 00000000002F3B80]   'DeckLink 4K Extreme'
dummy: Immediate exit requested

2°) Find out supported formats for a devices :  ffmpeg -f decklink -list_formats 1 -i "DeckLink 4K Extreme"

[decklink @ 00000000000E3B20] Supported formats for 'DeckLink 4K Extreme':
[decklink @ 00000000000E3B20]   1       720x486 at 30000/1001 fps (interlaced, lower field first)
[decklink @ 00000000000E3B20]   2       720x576 at 25000/1000 fps (interlaced, upper field first)
[decklink @ 00000000000E3B20]   3       1920x1080 at 24000/1001 fps
[decklink @ 00000000000E3B20]   4       1920x1080 at 24000/1000 fps
[decklink @ 00000000000E3B20]   5       1920x1080 at 25000/1000 fps
[decklink @ 00000000000E3B20]   6       1920x1080 at 30000/1001 fps
[decklink @ 00000000000E3B20]   7       1920x1080 at 30000/1000 fps
[decklink @ 00000000000E3B20]   8       1920x1080 at 25000/1000 fps (interlaced, upper field first)
[decklink @ 00000000000E3B20]   9       1920x1080 at 30000/1001 fps (interlaced, upper field first)
[decklink @ 00000000000E3B20]   10      1920x1080 at 30000/1000 fps (interlaced, upper field first)
[decklink @ 00000000000E3B20]   11      1920x1080 at 50000/1000 fps
[decklink @ 00000000000E3B20]   12      1920x1080 at 60000/1001 fps
[decklink @ 00000000000E3B20]   13      1920x1080 at 60000/1000 fps
[decklink @ 00000000000E3B20]   14      1280x720 at 50000/1000 fps
[decklink @ 00000000000E3B20]   15      1280x720 at 60000/1001 fps
[decklink @ 00000000000E3B20]   16      1280x720 at 60000/1000 fps
[decklink @ 00000000000E3B20]   17      2048x1080 at 24000/1001 fps
[decklink @ 00000000000E3B20]   18      2048x1080 at 24000/1000 fps
[decklink @ 00000000000E3B20]   19      2048x1080 at 25000/1000 fps
[decklink @ 00000000000E3B20]   20      3840x2160 at 24000/1001 fps
[decklink @ 00000000000E3B20]   21      3840x2160 at 24000/1000 fps
[decklink @ 00000000000E3B20]   22      3840x2160 at 25000/1000 fps
[decklink @ 00000000000E3B20]   23      3840x2160 at 30000/1001 fps
[decklink @ 00000000000E3B20]   24      3840x2160 at 30000/1000 fps
[decklink @ 00000000000E3B20]   25      4096x2160 at 24000/1001 fps
[decklink @ 00000000000E3B20]   26      4096x2160 at 24000/1000 fps
[decklink @ 00000000000E3B20]   27      4096x2160 at 25000/1000 fps
DeckLink 4K Extreme: Immediate exit requested

3°) Use the decklink card to capture a NTSC stream into a file: 

ffmpeg.exe ^
   -rtbufsize 1073741824 ^
   -bm_v210 1 ^
   -bm_channels 8 ^
   -bm_audiodepth 32 ^
   -f decklink -i "DeckLink 4K Extreme@1" ^
   -filter_complex "[0:0]pan=1c|c0=c0[a1];[0:0]pan=1c|c0=c1[a2];[0:0]pan=1c|c0=c2[a3];[0:0]pan=1c|c0=c3[a4]" ^
   -map 0:1 ^
   -aspect 4:3 ^
   -codec:v ffv1 ^
   -level 3 ^
   -coder 1 ^
   -context 1 ^
   -g 1 ^
   -threads 4 ^
   -slices 24 ^
   -slicecrc 1 ^
   -map [a1]:1 ^
   -map [a2]:2 ^
   -map [a3]:3 ^
   -map [a4]:4 ^
   -codec:a pcm_s24le ^
   -f matroska ^
   d:\test.mkv



   From Brian:
   ---------------------------------------------------------------------------------
   #!/usr/bin/perl

our $CONFIG = {
   env => 'dev',

   # HPSS Configuration
   hsiRoot => "MDPI-dev", 

   # directories on HPSS
   dropboxDir => "dropbox",
   workspaceDir => "workspace",
   investigateDir => "investigate",
   archiveDir => "archive",
   deleteDir => "deleted",
   freezerDir => "freezer",

   # NFS-shared directories
   transcoderQueues => "/srv/mdpi/transcoderQueues-dev",

   # timeouts
   transferTimeout => 8 * 3600,  # 8 hours
   queuedTimeout => 300, #30 * 60,  # 30 minutes

   # POD
   podURL => "https://pod-dev.mdpi.iu.edu/",
   podAuthFile => "/srv/mdpi/auth.dev",

   # admins
   admins => "bdwheele\@indiana.edu",

   # tolerances
   durationTolerance => 0.1, # % allowable difference in duration for different master formats

   # log file
   logFile => "/srv/mdpi/mdpi_batch-dev/log/processing.log",

   # tape latency bypass
   atsSleep => 60 * 1, # seconds to wait for adaptive tape sleep to go into effect.
   stagingTimeout => 3600 * 8,  # seconds to wait for object to be staged before restaging.

   # qc transfer location
   qcStaging => "/N/qc-01/Shared/QC",
   qcStagingAge => 4, # in days

   # audioinspector stuff
   aiDropbox => "/N/qc-01/Shared/AI_Dropbox",
   aiOutput => "/N/qc-01/Shared/QC/Reports",
   aiOutputAge => 4, # in days

   # MARC -> MODS Stylesheet
   z3950Host => "libprd.uits.indiana.edu",
   z3950Port => 2200,
   xsltMARC2MODS => "/srv/mdpi/mdpi_batch-dev/etc/MARC21slim2MODS3-5.xsl",
   xsltproc => "/usr/bin/xsltproc",

   # stuff for changing ownership
   ch2dlibHost => "newcsb1.bedrock.iu.edu",
   ch2dlibUser => "dlib",
   ch2dlib => "/usr/local/bin/ch2dlib",

   avalonStaging => "/tmp/avalon",

};

our $CARRIER = {
   "Open Reel Audio Tape" => {
   capacity => 4,
   masters => {
       pres => {
       ext => 'wav',
       qc => [['format', undef, 'format_short_name', 'wav'],
              ['format', undef, 'audio_stream_count', 1, 0],
              ['format', undef, 'stream_duration', 1, 0],
              ['audio', 0, 'bits_per_sample', 24, 0],
              ['audio', 0, 'sample_rate', 96000, 0],
              ['audio', 0, 'codec_name', 'pcm_s24le'],
              ['audio', 0, 'channels', [2, 1], 0]],
       },
       prod => {
       ext => 'wav',
       qc => 'pres'
       },
       access => {
       ext => 'mp4',
       qc => [['format', undef, 'format_short_name', 'qt'],
              ['format', undef, 'audio_stream_count', 1, 0],
              ['format', undef, 'stream_duration', 1, 0],
              ['audio', 0, 'sample_rate', 48000, 0],
              ['audio', 0, 'codec_name', 'aac'],
              ['audio', 0, 'channels', [2, 1], 0]],
       },        
   },
   derivatives => [[pres => 'high'],
           [pres => 'med'],
           [pres => 'audioinspector'],
           ['*' => 'sip']],
   },

   "CD-R" => {
   capacity => 2,
   masters => {
       pres => {
       ext => 'wav',
       qc => [['format', undef, 'format_short_name', 'wav'],
              ['format', undef, 'audio_stream_count', 1, 0],
              ['format', undef, 'stream_duration', 1, 0],
              ['audio', 0, 'bits_per_sample', 24, 0],
              ['audio', 0, 'sample_rate', 96000, 0],
              ['audio', 0, 'codec_name', 'pcm_s24le'],
              ['audio', 0, 'channels', [2, 1], 0]],
       },
       prod => {
       ext => 'wav',
       qc => 'pres'
       },
       access => {
       ext => 'mp4',
       qc => [['format', undef, 'format_short_name', 'qt'],
              ['format', undef, 'audio_stream_count', 1, 0],
              ['format', undef, 'stream_duration', 1, 0],
              ['audio', 0, 'sample_rate', 48000, 0],
              ['audio', 0, 'codec_name', 'aac'],
              ['audio', 0, 'channels', [2, 1], 0]],
       },        
   },
   derivatives => [[pres => 'high'],
           [pres => 'med'],
           [pres => 'audioinspector'],
           ['*' => 'sip']],
   },

   "LP" => {
   capacity => 4,
   masters => {
       pres => {
       ext => 'wav',
       qc => [['format', undef, 'format_short_name', 'wav'],
              ['format', undef, 'audio_stream_count', 1, 0],
              ['format', undef, 'stream_duration', 1, 0],
              ['audio', 0, 'bits_per_sample', 24, 0],
              ['audio', 0, 'sample_rate', 96000, 0],
              ['audio', 0, 'codec_name', 'pcm_s24le'],
              ['audio', 0, 'channels', [2, 1], 0]],
       },
       prod => {
       ext => 'wav',
       qc => 'pres'
       },
       access => {
       ext => 'mp4',
       qc => [['format', undef, 'format_short_name', 'qt'],
              ['format', undef, 'audio_stream_count', 1, 0],
              ['format', undef, 'stream_duration', 1, 0],
              ['audio', 0, 'sample_rate', 48000, 0],
              ['audio', 0, 'codec_name', 'aac'],
              ['audio', 0, 'channels', [2, 1], 0]],
       },        
   },
   derivatives => [[pres => 'high'],
           [pres => 'med'],
           [pres => 'audioinspector'],
           ['*' => 'sip']],
   },


   "DAT" => {
   capacity => 2,
   masters => {
       pres => {
       ext => 'wav',
       qc => [['format', undef, 'format_short_name', 'wav'],
              ['format', undef, 'audio_stream_count', 1, 0],
              ['format', undef, 'stream_duration', 1, 0],
              ['audio', 0, 'bits_per_sample', 24, 0],
              ['audio', 0, 'sample_rate', 96000, 0],
              ['audio', 0, 'codec_name', 'pcm_s24le'],
              ['audio', 0, 'channels', [2, 1], 0]],
       },
       prod => {
       ext => 'wav',
       qc => 'pres'
       },
       access => {
       ext => 'mp4',
       qc => [['format', undef, 'format_short_name', 'qt'],
              ['format', undef, 'audio_stream_count', 1, 0],
              ['format', undef, 'stream_duration', 1, 0],
              ['audio', 0, 'sample_rate', 48000, 0],
              ['audio', 0, 'codec_name', 'aac'],
              ['audio', 0, 'channels', [2, 1], 0]],
       },        
   },
   derivatives => [[pres => 'high'],
           [pres => 'med'],
           [pres => 'audioinspector'],
           ['*' => 'sip']],
   },

   "Betacam SP" => {
   #capacity => 25, # two masters per 48 cores, one per 24 cores
   capacity => 17, # three masters per 48 cores, two masters per 24 cores
   #capacity => 13, # four masters per 48 cores, two masters per 24 cores
   #capacity => 50, # one master.

   masters => {
       pres => {
       ext => "mov",
       qc => [['format', undef, 'format_short_name', 'qt'],
              ['format', undef, 'audio_stream_count', 2, 0],
              ['format', undef, 'video_stream_count', 1, 0],
              ['format', undef, 'stream_duration', 1, 0],
              ['audio', 0, 'bits_per_sample', 24, 0],
              ['audio', 0, 'sample_rate', 48000, 0],
              ['audio', 0, 'codec_name', 'pcm_s24le'],
              ['audio', 0, 'channels', 1, 0],
              ['audio', 1, 'bits_per_sample', 24, 0],
              ['audio', 1, 'sample_rate', 48000, 0],
              ['audio', 1, 'codec_name', 'pcm_s24le'],
              ['audio', 1, 'channels', 1, 0],
              ['video', 0, 'codec_name', 'v210'],
              ['video', 0, 'width', 720, 0],
              ['video', 0, 'height', 486, 0],
              ['video', 0, 'r_frame_rate_dec', 29.97, 0],
              ['video', 0, 'pix_fmt', 'yuv422p10le']],
       },
       mezz => {
       ext => 'mov',
       qc => [['format', undef, 'format_short_name', 'qt'],
              ['format', undef, 'audio_stream_count', 2, 0],
              ['format', undef, 'video_stream_count', 1, 0],
              ['format', undef, 'stream_duration', 1, 0],
              ['audio', 0, 'bits_per_sample', 24, 0],
              ['audio', 0, 'sample_rate', 48000, 0],
              ['audio', 0, 'codec_name', 'pcm_s24le'],
              ['audio', 0, 'channels', 1, 0],
              ['audio', 1, 'bits_per_sample', 24, 0],
              ['audio', 1, 'sample_rate', 48000, 0],
              ['audio', 1, 'codec_name', 'pcm_s24le'],
              ['audio', 1, 'channels', 1, 0],
              ['video', 0, 'codec_name', 'mpeg2video'],
              ['video', 0, 'width', 720, 0],
              ['video', 0, 'height', 512, 0],
              ['video', 0, 'r_frame_rate_dec', 29.97, 0],
              ['video', 0, 'pix_fmt', 'yuv422p'],
              ['video', 0, 'bit_rate', 50 * 1048576, 5]],
       },
       access => {
       ext => 'mp4',
       qc => [['format', undef, 'format_short_name', 'qt'],
              ['format', undef, 'audio_stream_count', 2, 0],
              ['format', undef, 'video_stream_count', 1, 0],
              ['format', undef, 'stream_duration', 1, 0],
              ['audio', 0, 'sample_rate', 48000, 0],
              ['audio', 0, 'codec_name', 'aac'],
              ['audio', 0, 'channels', 1, 0],
              ['audio', 0, 'bit_rate', 128 * 1024, 5],
              ['audio', 1, 'sample_rate', 48000, 0],
              ['audio', 1, 'codec_name', 'aac'],
              ['audio', 1, 'channels', 1, 0],
              ['audio', 1, 'bit_rate', 128 * 1024, 5],
              ['video', 0, 'codec_name', 'h264'],
              ['video', 0, 'width', 720, 0],
              ['video', 0, 'height', 486, 0],
              ['video', 0, 'r_frame_rate_dec', 29.97, 0],
              ['video', 0, 'pix_fmt', 'yuv420p'],
              ['video', 0, 'bit_rate', 3 * 1048576, 5]],
       },
   },

   derivatives => [[mezz => 'high'],
           [mezz => 'med'],
           [mezz => 'low'],
           [mezz => 'qctools'],
           ['*' => 'sip']],
   },


};


1;
